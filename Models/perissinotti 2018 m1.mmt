[[model]]
name: perissinotti_2018_m1
# Initial values
states.C3                = 1
states.C2                = 0
states.C1                = 0
states.O                = 0
states.I                = 0

[environment]
F =  9.6485e4 [C/mol]
    in [C/mol]
K_o = 5.4 [mmol]
    in [mmol]
K_i = 145 [mmol] #Reported in VGC-KiMo
    in [mmol]
R = 8315 [mJ/mol/K]
    in [mJ/mol/K]
T = 296 [K] #296 or 310
    in [K]
time = 0 [ms] bind time
    in [ms]
g_0_Kr = 0.024 [mS/uF]
    in [mS/uF]
g_Kr = g_0_Kr * (T / 35 [K] - 55 / 7) * sqrt(K_o / 5.4 [mmol])
    in [mS/uF]
E_K = R * T / F * log(K_o / K_i)
    in [mV]
IKr = g_Kr * states.O * (stimulus.pace - E_K)
    in [A/F]

[stimulus]
pace = 0 [mV] bind pace
    in [mV]

[states]
dot(C3) = be*C2 - ae*C3
    in [1]
dot(C2) = ae*C3 + bin*C1 - be*C2 - ain*C2
    in [1]
dot(C1) = ain*C2 + bb*O - bin*C1 - aa*C1
    in [1]
dot(O) = aa*C1 + ai*I - bi*O - bb*O
    in [1]
dot(I) = bi*O - ai*I
    in [1]

Tbase = 296 [K]
    in [K]

#Settings
hERG1b = 1 #Possible values 0, 1
cho = 0 #Possible values 0 (HEK), 1 (CHO)
defaultRates = 0 #Possible values 1 (defaults rates - overrides options of hERG1b and cho), 0 (fitted rates, defined by cho and hERG1b)
#Correction Factors
aeAlphaCorr = piecewise(defaultRates == 1, 1, cho==0 and hERG1b==0, 0.59, cho==0 and hERG1b==1, 0.81, cho==1 and hERG1b==0, 1.200, cho==1 and hERG1b==1, 1.20, 1)*environment.T/Tbase
aeBetaCorr = piecewise(defaultRates == 1, 1, cho==0 and hERG1b==0, 0.89, cho==0 and hERG1b==1, 0.80, cho==1 and hERG1b==0, 2.424, cho==1 and hERG1b==1, 1.63, 1)*Tbase/environment.T
beAlphaCorr = piecewise(defaultRates == 1, 1, cho==0 and hERG1b==0, 0.80, cho==0 and hERG1b==1, 1.24, cho==1 and hERG1b==0, 0.608, cho==1 and hERG1b==1, 1.14, 1)*environment.T/Tbase
beBetaCorr = piecewise(defaultRates == 1, 1, cho==0 and hERG1b==0, 1.10, cho==0 and hERG1b==1, 0.80, cho==1 and hERG1b==0, 1.165, cho==1 and hERG1b==1, 1.05, 1)*Tbase/environment.T
ainAlphaCorr = piecewise(defaultRates == 1, 1, cho==0 and hERG1b==0, 2.39, cho==0 and hERG1b==1, 5.43, cho==1 and hERG1b==0, 1.722, cho==1 and hERG1b==1, 2.05, 1)*environment.T/Tbase
binAlphaCorr = piecewise(defaultRates == 1, 1, cho==0 and hERG1b==0, 0.37, cho==0 and hERG1b==1, 0.81, cho==1 and hERG1b==0, 0.655, cho==1 and hERG1b==1, 0.68, 1)*environment.T/Tbase
aiAlphaCorr = piecewise(defaultRates == 1, 1, cho==0 and hERG1b==0, 1.82, cho==0 and hERG1b==1, 7.69, cho==1 and hERG1b==0, 1.075, cho==1 and hERG1b==1, 3.12, 1)*environment.T/Tbase
aiBetaCorr = piecewise(defaultRates == 1, 1, cho==0 and hERG1b==0, 1.19, cho==0 and hERG1b==1, 0.94, cho==1 and hERG1b==0, 0.994, cho==1 and hERG1b==1, 0.99, 1)*Tbase/environment.T
biAlphaCorr = piecewise(defaultRates == 1, 1, cho==0 and hERG1b==0, 0.59, cho==0 and hERG1b==1, 0.59, cho==1 and hERG1b==0, 0.808, cho==1 and hERG1b==1, 1.00, 1)*environment.T/Tbase
biBetaCorr = piecewise(defaultRates == 1, 1, cho==0 and hERG1b==0, 1.20, cho==0 and hERG1b==1, 0.81, cho==1 and hERG1b==0, 1.801, cho==1 and hERG1b==1, 1.00, 1)*Tbase/environment.T
aaAlphaCorr = piecewise(defaultRates == 1, 1, cho==0 and hERG1b==0, 0.80, cho==0 and hERG1b==1, 2.75, cho==1 and hERG1b==0, 2, cho==1 and hERG1b==1, 8, 1)*environment.T/Tbase
aaBetaCorr = piecewise(defaultRates == 1, 1, cho==0 and hERG1b==0, 1.13, cho==0 and hERG1b==1, 0.80, cho==1 and hERG1b==0, 1.554, cho==1 and hERG1b==1, 1.03, 1)*Tbase/environment.T
bbAlphaCorr = piecewise(defaultRates == 1, 1, cho==0 and hERG1b==0, 1.51, cho==0 and hERG1b==1, 11.84, cho==1 and hERG1b==0, 1.222, cho==1 and hERG1b==1, 11.39, 1)*environment.T/Tbase
bbBetaCorr = piecewise(defaultRates == 1, 1, cho==0 and hERG1b==0, 0.90, cho==0 and hERG1b==1, 0.82, cho==1 and hERG1b==0, 1.068, cho==1 and hERG1b==1, 1.51, 1)*Tbase/environment.T

aeAlpha = 5.78E-02[ms^-1]*aeAlphaCorr
    in [ms^-1]
aeBeta = 1.17E-02[mV^-1]*aeBetaCorr
    in [mV^-1]
beAlpha = 6.01E-02[ms^-1]*beAlphaCorr
    in [ms^-1]
beBeta = -0.0631[mV^-1]*beBetaCorr
    in [mV^-1]
ainAlpha = 9.22E-03[ms^-1]*ainAlphaCorr
    in [ms^-1]
binAlpha = 3.65E-02[ms^-1]*binAlphaCorr
    in [ms^-1]
aiAlpha = 3.64E-03[ms^-1]*aiAlphaCorr
    in [ms^-1]
aiBeta = -0.0327[mV^-1]*aiBetaCorr
    in [mV^-1]
biAlpha = 1.25E-01[ms^-1]*biAlphaCorr
    in [ms^-1]
biBeta = 0.0233[mV^-1]*biBetaCorr
    in [mV^-1]
aaAlpha = 6.21E-03[ms^-1]*aaAlphaCorr
    in [ms^-1]
aaBeta = 0.0382[mV^-1]*aaBetaCorr
    in [mV^-1]
bbAlpha = 1.36E-04[ms^-1]*bbAlphaCorr
    in [ms^-1]
bbBeta = -0.0418[mV^-1]*bbBetaCorr
    in [mV^-1]

ae = aeAlpha*exp(aeBeta*stimulus.pace)
    in [ms^-1]
be = beAlpha*exp(beBeta*stimulus.pace)
    in [ms^-1]
ain = ainAlpha
    in [ms^-1]
bin = binAlpha
    in [ms^-1]
ai = aiAlpha*exp(aiBeta*stimulus.pace)
    in [ms^-1]
bi = biAlpha*exp(biBeta*stimulus.pace)*(5.4 [mmol] / environment.K_o)^0.4
    in [ms^-1]
aa = aaAlpha*exp(aaBeta*stimulus.pace)
    in [ms^-1]
bb = bbAlpha*exp(bbBeta*stimulus.pace)
    in [ms^-1]

[[protocol]]
# Level  Start    Length   Period   Multiplier
40      0    1000      1000.0   0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run simulation
d = s.run(1000)

# Display the results
var = 'environment.time'
plt.figure()
plt.plot(d.time(), d[var])
plt.title(var)
plt.show()


[[model]]
name: M10-IKr
author: Dominic Whittaker
# Initial values
ikr.c1 = 0
ikr.c2 = 1
ikr.i = 0
ikr.ic1 = 0
ikr.ic2 = 0
ikr.o = 0

#
# Membrane potential
#
[membrane]
V = 0 [mV] bind pace
    desc: membane potential
    in [mV]

[environment]
EK = R * T / F * log(K_o / K_i)
    in [mV]
F =  9.6485e4 [C/mol]
    in [C/mol]
K_o = 4 [mmol]
    in [mmol]
K_i = 141.0167 [mmol]
    in [mmol]
R = 8315 [mJ/mol/K]
    in [mJ/mol/K]
T = 296 [K]
    in [K]
IKr = ikr.IKr
    in [A/F]
time = 0 [ms] bind time
    in [ms]

[ikr]
use membrane.V
IKr = p13 * o * (V - environment.EK)
    in [A/F]

dot(c1) = a1 * c2 + ah * ic1 + b2 * o - (b1 + bh + a2) * c1
    in [1]
dot(c2) = b1 * c1 + ah * ic2 - (a1 + bh) * c2
    in [1]
dot(i) = a2 * ic1 + bh * o - (b2 + ah) * i
    in [1]
dot(ic1) = a1 * ic2 + bh * c1 + b2 * i - (b1 + ah + a2) * ic1
    in [1]
dot(ic2) = b1 * ic1 + bh * c2 - (ah + a1) * ic2
    in [1]
dot(o) = a2 * c1 + ah * i - (b2 + bh) * o
    in [1]

a1 = p1 * exp(p2 * V)
    in [ms^-1]
b1 = p3 * exp(-p4 * V)
    in [ms^-1]
bh = p5 * exp(p6 * V)
    in [ms^-1]
ah = p7 * exp(-p8 * V)
    in [ms^-1]
a2 = p9 * exp(p10 * V)
    in [ms^-1]
b2 = p11 * exp(-p12 * V)
    in [ms^-1]

p1 = 1.267e-2 [1/ms]
    in [1/ms]
p2 = 8.925e-2 [1/mV]
    in [1/mV]
p3 = 1.771e-2 [1/ms]
    in [1/ms]
p4 = 1.010e-7 [1/mV]
    in [1/mV]
p5 = 2.932e-1 [1/ms]
    in [1/ms]
p6 = 1.359e-2 [1/mV]
    in [1/mV]
p7 = 7.510e-2 [1/ms]
    in [1/ms]
p8 = 2.459e-2 [1/mV]
    in [1/mV]
p9 = 8.780e-2 [1/ms]
    in [1/ms]
p10 = 2.012e-2 [1/mV]
    in [1/mV]
p11 = 1.643e-4 [1/ms]
    in [1/ms]
p12 = 5.073e-2 [1/mV]
    in [1/mV]
p13 = 0.024 [mS/uF]
    in [mS/uF]

[[script]]
import myokit
import myokit.pacing as pacing
import numpy as np
import matplotlib
import matplotlib.pyplot as pl

#
# Simple IKr test script
#

# Get model
m = get_model()

# Create pacing protocol
v = np.arange(-100, 50 + 10, 10)
p = pacing.steptrain(
        vsteps=v,
        vhold=-80,
        tpre=2000,
        tstep=5000,
        tpost=3000)

d = [
    'engine.time',
    'membrane.V',
    'ikr.IKr',
    ]

# Run simulation
s = myokit.Simulation(m, p)
s.set_max_step_size(0.1)
d = s.run(p.characteristic_time(), log=d)

# Create colormap for plotting
cmap = matplotlib.cm.get_cmap('viridis')
norm = matplotlib.colors.Normalize(0, len(v))

# Plot data as overlapping steps
d2 = d.npview()
d2 = d2.regularize(0.5)
d2 = d2.fold(10000)
pl.figure()
for k in xrange(len(v)):
    pl.subplot(2,1,1)
    pl.plot(d2.time(), d2['membrane.V', k], color=cmap(norm(k)))
    pl.subplot(2,1,2)
    pl.plot(d2.time(), d2['ikr.IKr', k], color=cmap(norm(k)))
pl.show()


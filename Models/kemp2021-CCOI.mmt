[[model]]
name: CCOI-IKr
author: Dominic Whittaker
# Initial values
ikr.c1 = 0
ikr.c2 = 1
ikr.i = 0
ikr.o = 0

#
# Membrane potential
#
[membrane]
V = 0 [mV] bind pace
    desc: membane potential
    in [mV]

[environment]
EK = R * T / F * log(K_o / K_i)
    in [mV]
F =  9.6485e4 [C/mol]
    in [C/mol]
K_o = 4 [mmol]
    in [mmol]
K_i = 141.0167 [mmol]
    in [mmol]
R = 8315 [mJ/mol/K]
    in [mJ/mol/K]
T = 296 [K]
    in [K]
IKr = ikr.IKr
    in [A/F]
time = 0 [ms] bind time
    in [ms]

[ikr]
use membrane.V
IKr = p13 * o * (V - environment.EK)
    in [A/F]

dot(c1) = r1 * c2 + r5 * o - (r4 + r2) * c1
    in [1]
dot(c2) = r4 * c1 - r1 * c2
    in [1]
dot(i) = r3 * o - r6 * i
    in [1]
dot(o) = r2 * c1 + r6 * i - (r5 + r3) * o
    in [1]

r1 = p1 * exp(p2 * V)
    in [ms^-1]
r2 = p5 * exp(p6 * V)
    in [ms^-1]
r3 = p9 * exp(p10 * V)
    in [ms^-1]
r4 = p3 * exp(-p4 * V)
    in [ms^-1]
r5 = p7 * exp(-p8 * V)
    in [ms^-1]
r6 = p11 * exp(-p12 * V)
    in [ms^-1]

p1 = 4.831e-2 [1/ms]
    in [1/ms]
p2 = 9.720e-3 [1/mV]
    in [1/mV]
p3 = 7.529e-2 [1/ms]
    in [1/ms]
p4 = 6.792e-2 [1/mV]
    in [1/mV]
p5 = 2.437e-2 [1/ms]
    in [1/ms]
p6 = 2.737e-2 [1/mV]
    in [1/mV]
p7 = 5.815e-5 [1/ms]
    in [1/ms]
p8 = 5.719e-2 [1/mV]
    in [1/mV]
p9 = 2.871e-1 [1/ms]
    in [1/ms]
p10 = 1.354e-2 [1/mV]
    in [1/mV]
p11 = 8.410e-2 [1/ms]
    in [1/ms]
p12 = 2.526e-2 [1/mV]
    in [1/mV]
p13 = 0.15240 [mS/uF]
    in [mS/uF]

[[script]]
import myokit
import myokit.pacing as pacing
import numpy as np
import matplotlib
import matplotlib.pyplot as pl

#
# Simple IKr test script
#

# Get model
m = get_model()

# Create pacing protocol
v = np.arange(-100, 50 + 10, 10)
p = pacing.steptrain(
        vsteps=v,
        vhold=-80,
        tpre=2000,
        tstep=5000,
        tpost=3000)

d = [
    'engine.time',
    'membrane.V',
    'ikr.Iion',
    ]

# Run simulation
s = myokit.Simulation(m, p)
s.set_max_step_size(0.1)
d = s.run(p.characteristic_time(), log=d)

# Create colormap for plotting
cmap = matplotlib.cm.get_cmap('viridis')
norm = matplotlib.colors.Normalize(0, len(v))

# Plot data as overlapping steps
d2 = d.npview()
d2 = d2.regularize(0.5)
d2 = d2.fold(10000)
pl.figure()
for k in xrange(len(v)):
    pl.subplot(2,1,1)
    pl.plot(d2.time(), d2['membrane.V', k], color=cmap(norm(k)))
    pl.subplot(2,1,2)
    pl.plot(d2.time(), d2['ikr.Iion', k], color=cmap(norm(k)))
pl.show()


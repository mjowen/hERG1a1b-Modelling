[[model]]
name: larsen_2010
# Initial values
iKr_Markov.Cr1                = 0.9786
iKr_Markov.Cr2                = 0.0031
iKr_Markov.Cr3                = 0.0029
iKr_Markov.Or4                = 0.014
iKr_Markov.Ir5                = 0.0014
K.K_i                         = 141.0167

[reversal_potentials]
E_K = environment.R * environment.T / environment.F * log(environment.K_o / K.K_i)
    in [mV]

[K]
#dot(K_i) = -(IKr.i_Kr) / (cell.Vol_c * environment.F) * cell.Cm
#    in [mM]
dot(K_i) = 0

[environment]
F =  9.6485e4 [C/mol]
    in [C/mol]
K_o = 4 [mM]
    in [mM]
R = 8315 [mJ/mol/K]
    in [mJ/mol/K]
T = 296 [K]
    in [K]
time = 0 [ms] bind time
    in [ms]
IKr = IKr.i_Kr

[IKr]
g_Kr_0 = 0.024 [mS/uF]
    in [mS/uF]
i_Kr = g_Kr_0 * (environment.T / 35 [K] - 55 / 7) * sqrt(environment.K_o / 5.4 [mM]) * iKr_Markov.Or4 * (cell.V - reversal_potentials.E_K)
    in [A/F]

[cell]
Cm = 0.115 [nF]
    in [nF]
V = 40 [mV] bind pace
    in [mV]
Vol_c = 0.016404 [nL]
    in [nL]

[iKr_Markov]
dot(Cr1) = beta_xr1 * Cr2 - alpha_xr1 * Cr1
    in [1]
dot(Cr2) = alpha_xr1 * Cr1 + beta_xr2 * Cr3 - (alpha_xr2 + beta_xr1) * Cr2
    in [1]
dot(Cr3) = alpha_xr2 * Cr2 + beta_xr3 * Or4 - (alpha_xr3 + beta_xr2) * Cr3
    in [1]
dot(Ir5) = alpha_xr4 * Or4 - beta_xr4 * Ir5
    in [1]
dot(Or4) = alpha_xr3 * Cr3 + beta_xr4 * Ir5 - (alpha_xr4 + beta_xr3) * Or4
    in [1]
T_Base = 310 [K]
    in [K]
alpha_xr1 = alpha3Scale*1 [mS/uF] * environment.T / T_Base * exp(24.335 + T_Base / environment.T * (0.0112 [1/mV] * cell.V - 25.914))
    in [mS/uF]
alpha_xr2 = 1 [mS/uF] * environment.T / T_Base * exp(22.746 + T_Base / environment.T * (0 [1/mV] * cell.V - 25.914))
    in [mS/uF]
alpha_xr3 = 1 [mS/uF] * environment.T / T_Base * exp(22.098 + T_Base / environment.T * (0.0365 [1/mV] * cell.V - 25.914))
    in [mS/uF]
alpha_xr4 = 1 [mS/uF] * environment.T / T_Base * exp(30.016 + T_Base / environment.T * (0.0223 [1/mV] * cell.V - 30.888)) * (5.4 [mM] / environment.K_o)^0.4
    in [mS/uF]
beta_xr1 = 1 [mS/uF] * environment.T / T_Base * exp(13.688 + T_Base / environment.T * (-0.0603 [1/mV] * cell.V - 15.707))
    in [mS/uF]
beta_xr2 = 1 [mS/uF] * environment.T / T_Base * exp(13.193 + T_Base / environment.T * (0 [1/mV] * cell.V - 15.707))
    in [mS/uF]
beta_xr3 = beta3Scale*1 [mS/uF] * environment.T / T_Base * exp(7.313 + T_Base / environment.T * (-0.0399 [1/mV] * cell.V - 15.707))
    in [mS/uF]
beta_xr4 = beta4Scale*1 [mS/uF] * environment.T / T_Base * exp(30.061 + T_Base / environment.T * (-0.0312 [1/mV] * cell.V - 33.243))
    in [mS/uF]
hERG1b = 0 #Possible values 0, 20, 40, 60, 80, 100
alpha3Scale = piecewise(hERG1b==0, 1, hERG1b==20, 1.5, hERG1b==40, 1.5, hERG1b==60, 1.5, hERG1b==80, 1.5, hERG1b==100, 1.5, 1)
beta3Scale = piecewise(hERG1b==0, 1, hERG1b==20, 3.8, hERG1b==40, 5.5, hERG1b==60, 6.4, hERG1b==80, 9.4, hERG1b==100, 14.0, 1)
beta4Scale = piecewise(hERG1b==0, 1, hERG1b==20, 1.3, hERG1b==40, 1.6, hERG1b==60, 1.6, hERG1b==80, 1.9, hERG1b==100, 2.1, 1)

[[protocol]]
# Level  Start    Length   Period   Multiplier
40      0    1000      1000.0   0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run simulation
d = s.run(1000)

# Display the results
var = 'environment.time'
plt.figure()
plt.plot(d.time(), d[var])
plt.title(var)
plt.show()


[[model]]
name: perissinotti_2018_m2
# Initial values
states.C3   = 1
states.C2   = 0
states.C1   = 0
states.O    = 0
states.I    = 0

[environment]
F =  9.6485e4 [C/mol]
    in [C/mol]
K_o = 5.4 [mM]
    in [mM]
K_i = 145 [mM] #Reported in VGC-KiMo
    in [mM]
R = 8315 [mJ/mol/K]
    in [mJ/mol/K]
T = 296 [K]
    in [K]
time = 0 [ms] bind time
    in [ms]
g_0_Kr = 0.024 [mS/uF]
    in [mS/uF]
g_Kr = g_0_Kr * (T / 35 [K] - 55 / 7) * sqrt(environment.K_o / 5.4 [mM])
E_K = R * T / F * log(K_o / K_i)
    in [mV]
IKr = g_Kr * states.O * (stimulus.IStim - E_K)
    in [A/F]

[stimulus]
amplitude = 1 [uA/cm^2]
IStim = pace * amplitude
pace = 0 bind pace

[states]
dot(C3) = be*C2 - ae*C3
    in [1]
dot(C2) = ae*C3 + bin*C1 - be*C2 - ain*C2
    in [1]
dot(C1) = ain*C2 + bb*O - bin*C1 - aa*C1 - biStar*C1
    in [1]
dot(O) = aa*C1 + ai*I - bi*O - bb*O
        in [1]
dot(I) = bi*O + biStar*C1 - ai*I
    in [1]

aeAlpha = if(hERG1b == 1, 1.19e-2, 3.77e-3)
beAlpha = if(hERG1b == 1, 1.82e-2, 2.44e-2)
ainAlpha = if(hERG1b == 1, 9.29e-2, 3.59e-2)
binAlpha = if(hERG1b == 1, 1.09e-1, 1.65e-2)
aiAlpha = if(hERG1b == 1, 5.11e-2, 1.74e-2)
biAlpha = if(hERG1b == 1, 1.79e-2, 9.26469e-3)
aaAlpha = if(hERG1b == 1, 1.55e-1, 8.80e-2)
bbAlpha = if(hERG1b == 1, 7.82e-2, 5.11e-3)
biStarAlpha = if(hERG1b == 1, 9.32e-7, 1.02e-9)
aeBeta = if(hERG1b == 1, 2.17e-2, 3.29e-2)
beBeta = if(hERG1b == 1, -3.79e-2, -6.77e-2)
aiBeta = if(hERG1b == 1, 2.09e-2, 2.87e-2)
biBeta = if(hERG1b == 1, -2.15e-2, -2.347e-2)
aaBeta = if(hERG1b == 1, 9.6e-3, 1.02e-2)
bbBeta = if(hERG1b == 1, -3.54e-2, -4.44e-2)
biStarBeta = if(hERG1b == 1, 1.621e-5, 7.99e-6)

ae = aeAlpha*exp(aeBeta*stimulus.IStim)
be = beAlpha*exp(beBeta*stimulus.IStim)
ain = ainAlpha
bin = binAlpha
ai = aiAlpha*exp(aiBeta*stimulus.IStim)
bi = biAlpha*exp(biBeta*stimulus.IStim)
aa = aaAlpha*exp(aaBeta*stimulus.IStim)
bb = bbAlpha*exp(bbBeta*stimulus.IStim)
biStar = biStarAlpha*exp(biStarBeta*stimulus.IStim)

hERG1b = 0 #Possible values 0, 1

[[protocol]]
# Level  Start    Length   Period   Multiplier
40      0    1000      1000.0   0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run simulation
d = s.run(1000)

# Display the results
var = 'environment.time'
plt.figure()
plt.plot(d.time(), d[var])
plt.title(var)
plt.show()

